#OpenAI ChatBot

A fully secured AI software as a service project using openAI and MERN stack.

Fully responsive web design and chatbot. UI is similar to ChatGPT.

Cookies will be stored in order to keep the user logged in for 7 days.

NodeJS and ExpressJS are used in the backend for creating rest APIs and MongoDB will be used for efficient data storage. Vite is used on the frontend for Dynamic and reliable application. For authentication and authorization, password encryption is used. JWT and it's json web tokens is used. HTTP only cookies is used to access the cookies only on the server side(backend) and connot be accessed by JS. Validations and multiple middleware checks are maintained to ensure security. MaterialUI is used for designing and UI. ContextAPI in ReactJS is used to provide authentication. OpenAI integration will be used for chat completion along with NodeJS.

** MERN stack - collection of JS technologies; together forms a web development environment. **
=> MongoDB - database system; allows efficient data storage and retrieval.
=> ExpressJS - backend web application framework. Manages the routing, the server aspects and the middlewares throughout the NodeJS application.
=> ReactJS - frontend library. Creates dynamic and interactive UIs.
=> NodeJS - server side; executes JS, handles the requests and manages the backend operations.

*** Building the backend ***
1) Setup node and express using typescript.
2) Install all the necessary dependencies.
3) Register routes.
4) Integrate MongoDB database connection.
5) Create Register/Login on OpenAI Portal, Get API keys directly.
6) Build a secure authentication with Tokens and HTTP-only signed cookies.



-> Types of requests: (These are also middlewares)
    GET - fetching data from backend/database.
    PUT - update/modify/mutate data.
    POST - sends data.
    DELETE - to delete data.

    => these callback functions have 3 parameters - request, response and next. Request is made by the client/user. Response is the answer to the request made. Next is used to move on to the next available middleware.

Postman is an API testing platform.

Middleware: The function performed between the request and response.
-> express-validator: A set of express.js middlewares that contains a large collection of validators.

{
    // Creating routes and middlewares.
app.get("/hello",(req, res, next) => {
  return res.send("Hello");
})

app.use(express.json());

app.post("/hello",(req, res, next) => {
  console.log(req.body.name);
  // json data sent in body
  return res.send("Hello");
})
// send some data along with the request.

}

"/hello" used in the above requsts are static routes. To access a single particular record, add the user id# to the url. ("/user/:id")


** Adding folders:
1) models - all models.
2) routes - creating the routing points.
3) controllers - hender functions; contains functions to control the incoming API requests.
4) config - all configurations.
5) utils - utility functions.
6) db


** MongoDB **
Login -> create new project.
Using the cloud version instead of the downloaded version.
Goto network access and set it to access from anywhere.(any IP address).
Goto database -> connect -> Drivers -> copyurl -> replace the MongoDB url in .env file.
Using mongoose for MongoDB validation, casting and business logic. Open-source and easy-to-use tool.

** OpenAI Integration **
Login -> API keys -> Create a new key (name it and hit create).
Copy the secret key and paste it in .env file.


** Building CPI End-points **
-> Install morgan for retriving the logs and statuses of the code.
-> Create middlewares for the application. API structure - localhost 5000 or domain/api/version
-> Create a route handler file inside routes folder.
-> After the api/version request is made, the end-point is handled by appRouter (exported from the route handler file created).
-> Create route structure. [Example: user route, chats route, etc]. In simple words, it is just paving a path for the application to perform dynamically according to user actions.
-> Inside these routes, define all the http verbs that can be accepted. In order to do so, create controller files and actions into it.

# Database models (schemas):
-> user - name, email, password, chats: Chat[]
-> The mongoose package has a .find() function that can help with searching the query 'User'.

=> Once the client/user makes a request(signup), the data is first run through a middleware allocated to verify all the data entered by the user. If the data entered is incorrect or not in the right format, then it is sent back to the client to rectify and send again. If the data is according to the requirements, then it is proceeded to the next middleware to store the data. 


# Basic Structure: (User Signin and Login)
validators - contain checks
userRoutes - contains the order in which the middleware functions are to be executed.
userControllers - contains all the necessary middleware functions.